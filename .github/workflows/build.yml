name: Build image
run-name: Build image / ${{ inputs.machine_type }}

permissions:
  contents: 'read'
  id-token: 'write'

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'ID projet GCP'
        default: "k-ops-sandbox"
        required: true
        type: choice
        options:
          - k-ops-sandbox
      machine_type:
        description: 'image source'
        default: "rhel-9"
        required: true
        type: choice
        options:
          - rhel-9
          - rhel-8
      prefix_name:
        description: 'Prefix de nommage des images (optionnel)'
        type: string
      validate:
        description: 'Lancer les tests de validation sur l''image construite'
        type: boolean
        default: false

  workflow_call:
    inputs:
      project_id:
        default: "k-ops-sandbox"
        type: string
      machine_type:
        type: string
      validate:
        default: false
        type: boolean

env:
  repository_git: 'ansible'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ steps.image_name.outputs.IMAGE_NAME }}
    env:
      PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - uses: actions/checkout@v4

      - id: 'auth'
        name: Authentification GCP with workload identity federation
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/270411317394/locations/global/workloadIdentityPools/github-actions-packer/providers/github-provider'
          service_account: 'sa-buildimage@${{ inputs.project_id }}.iam.gserviceaccount.com'
          create_credentials_file: true
          token_format: 'access_token'
          access_token_lifetime: '3600s'
          cleanup_credentials: true
          export_environment_variables: true

      - id: 'gcloud'
        name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: Initialize Packer
        working-directory: templates/${{ inputs.machine_type }}
        run: packer init .

      - name: Build image
        id: build
        working-directory: templates/${{ inputs.machine_type }}
        run: |
            packer build -var project_id=${{ inputs.project_id }} \
            ${{ inputs.prefix_name != '' && format('-var "prefix_name={0}"', inputs.prefix_name) || '' }} \
            .

      - name: Install jq
        run: |
          sudo apt-get install jq -y

      - name: Get image name from Packer manifest
        id: image_name
        working-directory: templates/${{ inputs.machine_type }}
        run: |
          IMAGE_NAME=$(cat manifest.json | jq -r '.builds[0].custom_data.image_name')
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=$IMAGE_NAME"

  validate:
    needs: build
    if: ${{ inputs.validate == true }}
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4

      - id: 'auth'
        name: Authentification GCP with workload identity federation
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/270411317394/locations/global/workloadIdentityPools/github-actions-packer/providers/github-provider'
          service_account: 'sa-buildimage@${{ inputs.project_id }}.iam.gserviceaccount.com'

      - id: 'gcloud'
        name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Create test instance from image
        id: create_instance
        run: |
          INSTANCE_NAME="test-${{ github.run_id }}-${{ github.run_attempt }}"
          ZONE="europe-west9-b"
          gcloud compute instances create $INSTANCE_NAME \
            --project=${{ inputs.project_id }} \
            --zone=$ZONE \
            --image=${{ needs.build.outputs.IMAGE_NAME }} \
            --machine-type=e2-micro \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --format='value(name)'
          echo "INSTANCE_NAME=$INSTANCE_NAME" >> "$GITHUB_OUTPUT"
          echo "ZONE=$ZONE" >> "$GITHUB_OUTPUT"

      - name: Run Testinfra validation
        run: |
          pip install -r tests/testinfra/requirements.txt
          pytest --verbose tests/testinfra/test_image.py \
            --connection=gce \
            --gce-project-id=${{ inputs.project_id }} \
            --gce-zone=${{ steps.create_instance.outputs.ZONE }} \
            --hosts=${{ steps.create_instance.outputs.INSTANCE_NAME }}

      - name: Cleanup test instance
        if: always()
        run: |
          gcloud compute instances delete ${{ steps.create_instance.outputs.INSTANCE_NAME }} \
            --project=${{ inputs.project_id }} \
            --zone=${{ steps.create_instance.outputs.ZONE }} \
            --quiet